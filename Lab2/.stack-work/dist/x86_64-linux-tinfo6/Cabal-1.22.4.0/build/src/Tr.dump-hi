
==================== FINAL INTERFACE ====================
2021-03-28 22:22:36.982473 UTC

interface tr_3H0eZhir6ud8uRdWFjNcbG:Tr 7102
  interface hash: 6878d55b3f10afe29af434a164a65622
  ABI hash: f75a63544068d78cc31bc24f2db53556
  export-list hash: e6d301501f0ac0a74f6e10da1e472e0c
  orphan hash: 736dda1c28d8ee55d2f9494f32ffc2b7
  flag hash: d9361bf6fab46d78a42b3a0927c11fcc
  sig of: Nothing
  used TH splices: False
  where
exports:
  Tr.tr
  Tr.CharSet
module dependencies:
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0* containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.List f31ed8784b3e05f1397195751f7d74ea
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map 8137ae58be1ec45e0e573cabbb314b88
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base bb636ca21b1c081ff7d3ad149061440b
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
c6d315b580c6810d591c00cb1a92c43f
  $sfromList ::
    [(GHC.Types.Char, a)] -> Data.Map.Base.Map GHC.Types.Char a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a ds :: [(GHC.Types.Char, a)] ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ GHC.Types.Char @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { GHC.Types.C# ipv ->
                           Data.Map.Base.Bin
                             @ GHC.Types.Char
                             @ a
                             1
                             dt
                             x
                             (Data.Map.Base.Tip @ GHC.Types.Char @ a)
                             (Data.Map.Base.Tip @ GHC.Types.Char @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { GHC.Types.C# c1 ->
                           case ky of wild5 { GHC.Types.C# c2 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.geChar# c1 c2) of wild6 {
                             GHC.Types.False
                             -> Tr.$wpoly_go10
                                  @ a
                                  1
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Char
                                     @ a
                                     1
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a))
                                  wild2
                             GHC.Types.True
                             -> Tr.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Char
                                     @ a
                                     1
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a))
                                  wild2 } } } } } } }) -}
2db00ac213cc614ffef20e5bcb29b381
  $sfromList1 ::
    Data.Map.Base.Map GHC.Types.Char a1
    -> [(GHC.Types.Char, a1)] -> Data.Map.Base.Map GHC.Types.Char a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
553e7a868a20f2633ab1f7f202078e95
  $w$sgo10 ::
    GHC.Prim.Char#
    -> a1
    -> Data.Map.Base.Map GHC.Types.Char a1
    -> Data.Map.Base.Map GHC.Types.Char a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
6363e0de74c42774a805e3a2cff8585a
  $wpoly_go1 ::
    GHC.Prim.Char#
    -> Data.Map.Base.Map GHC.Types.Char a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
c08eed7b62392d6b010d8e61ba8398bc
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Char a
    -> [(GHC.Types.Char, a)]
    -> Data.Map.Base.Map GHC.Types.Char a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
caa89046b3e5a0a5eff934b9723ae01f
  type CharSet = GHC.Base.String
7a8a638eb1d94bbedb3494a7521bdcc6
  tr ::
    Tr.CharSet
    -> GHC.Base.Maybe Tr.CharSet -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>,
     Unfolding: (\ _inset :: Tr.CharSet
                   _outset :: GHC.Base.Maybe Tr.CharSet
                   xs :: GHC.Base.String ->
                 case _outset of wild {
                   GHC.Base.Nothing
                   -> letrec {
                        go :: [GHC.Types.Char] -> [GHC.Types.Char]
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ ds :: [GHC.Types.Char] ->
                          case ds of wild1 {
                            [] -> GHC.Types.[] @ GHC.Types.Char
                            : y ys
                            -> case GHC.List.elem
                                      @ GHC.Types.Char
                                      GHC.Classes.$fEqChar
                                      y
                                      _inset of wild2 {
                                 GHC.Types.False -> GHC.Types.: @ GHC.Types.Char y (go ys)
                                 GHC.Types.True -> go ys } }
                      } in
                      go xs
                   GHC.Base.Just a1
                   -> let {
                        d :: Data.Map.Base.Map GHC.Types.Char GHC.Types.Char
                        = Tr.$sfromList
                            @ GHC.Types.Char
                            (GHC.List.zip
                               @ GHC.Types.Char
                               @ GHC.Types.Char
                               _inset
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  a1
                                  (let {
                                     x :: GHC.Types.Char
                                     = Tr.tr_go a1 (GHC.List.lastError @ GHC.Types.Char)
                                   } in
                                   letrec {
                                     xs1 :: [GHC.Types.Char] = GHC.Types.: @ GHC.Types.Char x xs1
                                   } in
                                   xs1)))
                      } in
                      letrec {
                        go :: [GHC.Types.Char] -> [GHC.Types.Char]
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ ds :: [GHC.Types.Char] ->
                          case ds of wild1 {
                            [] -> GHC.Types.[] @ GHC.Types.Char
                            : y ys
                            -> GHC.Types.:
                                 @ GHC.Types.Char
                                 (case GHC.List.elem
                                         @ GHC.Types.Char
                                         GHC.Classes.$fEqChar
                                         y
                                         _inset of wild2 {
                                    GHC.Types.False -> y
                                    GHC.Types.True
                                    -> case y of ww { GHC.Types.C# ww1 ->
                                       case Tr.$wpoly_go1 @ GHC.Types.Char ww1 d of wild3 {
                                         GHC.Base.Nothing -> Data.Maybe.fromJust1 @ GHC.Types.Char
                                         GHC.Base.Just x -> x } } })
                                 (go ys) }
                      } in
                      go xs }) -}
d4db98dded7083ba8ed2a9090c30fe9b
  tr_go :: [GHC.Types.Char] -> GHC.Types.Char -> GHC.Types.Char
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)> -}
"SPEC/Tr fromList @ Char _" [ALWAYS] forall @ a
                                            $dOrd :: GHC.Classes.Ord GHC.Types.Char
  Data.Map.Base.fromList @ GHC.Types.Char @ a $dOrd
  = Tr.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

